================================ Spring Social ===============================
To check out the project and build from source, do the following:

 git clone --recursive git://github.com/SpringSource/spring-social.git
 cd spring-social
 ./gradlew build

Note: the --recursive switch above is important, as spring-social uses
git submodules, which must themselves be cloned and initialized. If --recursive
is omitted, doing so becomes a multi-step process of: 

git clone git://github.com/SpringSource/spring-social.git
git submodule init
git submodule update

-------------------------------------------------------------------------------
Note that this project no longer contains SaaS provider-specific connectivity
and API bindings. Each of the provider-specific modules is now in its own project.
This will enable those modules to progress and release on a separate schedule
than Spring Social and be able to react more quickly to changes in the provider's
API without the need to wait for a Spring Social release.

The SaaS provider-specific projects can be cloned from the following GitHub
URLs:

Twitter: git://github.com/SpringSource/spring-social-twitter.git
Facebook: git://github.com/SpringSource/spring-social-facebook.git
LinkedIn: git://github.com/SpringSource/spring-social-linkedin.git
TripIt: git://github.com/SpringSource/spring-social-tripit.git
GitHub: git://github.com/SpringSource/spring-social-github.git
Gowalla: git://github.com/SpringSource/spring-social-gowalla.git

Each of these projects uses the same build submodule as Spring Social. Thus,
you'll need to either clone them with the --recursive switch or init/update the
submodule as described above from Spring Social.

-------------------------------------------------------------------------------
To generate Eclipse metadata (.classpath and .project files), do the following:

 ./gradlew eclipse

Once complete, you may then import the projects into Eclipse as usual:

 File -> Import -> Existing projects into workspace

-------------------------------------------------------------------------------
To generate IDEA metadata (.iml and .ipr files), do the following:

 ./gradlew idea

-------------------------------------------------------------------------------
To build the JavaDoc, do the following from within the root directory:

 ./gradlew :docs:api

The result will be available in 'docs/build/api'.
===============================================================================
